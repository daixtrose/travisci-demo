language: cpp
sudo: required

branches:
  only: 
    - master

#os:
#    - linux

#compiler:
#    - clang
#    - g++-6

## env:
##    - TARGET_CPU=x64 BUILD_CONFIGURATION=Debug
##    - TARGET_CPU=x64 BUILD_CONFIGURATION=Release

matrix:
  include:
    # clang 5 C++11/14/1z Debug/Release-ASAN libc++, 11 Debug libstdc++
    - env: CLANG_VERSION=5.0 BUILD_TYPE=Debug CPP=11 ASAN=On LIBCXX=On CLANG_MODULES=Off BOOST=Off
      os: linux
      addons: &clang5
        apt:
          packages:
            - util-linux
            - clang-5.0
            - g++-6
            - valgrind
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0


    # gcc-6 C++11/14/1z Debug/Release
    - env: GCC_VERSION=6 BUILD_TYPE=Debug CPP=11 ASAN=On LIBCXX=Off BOOST=Off
      os: linux
      addons: &gcc6
        apt:
          packages:
            - g++-6
            - valgrind
          sources:
            - ubuntu-toolchain-r-test

before-install:
    - export CHECKOUT_PATH=`pwd`;
    - |
      if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      brew update
      brew install valgrind
      brew install gnu-sed --with-default-names
      brew install gnu-which --with-default-names
      fi
    - |
      if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        if [ -z "$(ls -A ${TRAVIS_BUILD_DIR}/deps/cmake/bin)" ]; then
          CMAKE_URL="https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.tar.gz"
          mkdir -p ${TRAVIS_BUILD_DIR}/deps/cmake && travis_retry wget --no-check-certificate --quiet -O - "${CMAKE_URL}" | tar --strip-components=1 -xz -C ${TRAVIS_BUILD_DIR}/deps/cmake
        fi
        export PATH="${TRAVIS_BUILD_DIR}/deps/cmake/bin:${PATH}"
      else
        if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
      fi
    - if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
    - if [ -n "$CLANG_VERSION" ]; then export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi
    - which $CXX
    - which $CC
    - which valgrind
    - $CXX --version
    - if [ "$ASAN" == "On" ]; then export SANITIZER=Address; fi
    - if [ -n "$CLANG_VERSION" ]; then sudo PATH="${PATH}" CXX="$CXX" CC="$CC" ./install_libcxx.sh; fi


install:
    - cd $CHECKOUT_PATH

    # Workaround for valgrind bug: https://bugs.kde.org/show_bug.cgi?id=326469.
    # It is fixed in valgrind 3.10 so this won't be necessary if someone
    # replaces the current valgrind (3.7) with valgrind-3.10
    - if [ "$BUILD_TYPE" == "Release" ] && [ "$ASAN" == "Off" ]; then sed -i 's/march=native/msse4.2/' CMakeLists.txt; fi
    - mkdir -p build
    - cd build
    - mkdir -p build
    - cd build
    - if [ -n "$CLANG_VERSION" -a "$ASAN" == "On" ]; then CXX_FLAGS="${CXX_FLAGS} -fsanitize=address,undefined,integer -fno-omit-frame-pointer -fno-sanitize=unsigned-integer-overflow"; fi
    - if [ -n "$GCC_VERSION" -a "$ASAN" == "On" ]; then CXX_FLAGS="${CXX_FLAGS} -fsanitize=address,undefined -fno-omit-frame-pointer"; fi
    - if [ "$GCC_VERSION" == "5" ]; then CXX_FLAGS="${CXX_FLAGS} -DRANGES_CXX_CONSTEXPR=RANGES_CXX_CONSTEXPR11"; fi
    - if [ -n "$CLANG_VERSION" ]; then CXX_FLAGS="${CXX_FLAGS} -D__extern_always_inline=inline"; fi
    - if [ "$LIBCXX" == "On" ]; then CXX_FLAGS="${CXX_FLAGS} -stdlib=libc++ -nostdinc++ -cxx-isystem /usr/include/c++/v1/ -Wno-unused-command-line-argument"; fi
    - if [ "$HEADERS" == "On" ]; then NO_HEADER_CHECK=0; else NO_HEADER_CHECK=1; fi
    - cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" -DCMAKE_EXE_LINKER_FLAGS="${CXX_LINKER_FLAGS}" -DRANGES_CXX_STD=$CPP -DRANGE_V3_NO_HEADER_CHECK=$NO_HEADER_CHECK
    - if [ "$BOOST" == "On" ]; then cmake .. -DRANGES_BUILD_CALENDAR_EXAMPLE=On -DBOOST_ROOT=${DEPS_DIR}/boost; fi
    - if [ "$CLANG_MODULES" == "On" ] && [ "$LIBCXX" == "On" ]; then cmake .. -DRANGES_MODULES=On -DRANGES_LIBCXX_MODULE="/usr/include/c++/v1/module.modulemap"; fi
    - make -j2 VERBOSE=1

script:
    # Only enable valgrind for non-ASAN Release builds
    - if [ "$BUILD_TYPE" == "Release" ] && [ "$ASAN" == "Off" ]; then CTEST_FLAGS="-D ExperimentalMemCheck"; fi
    - ctest -j2 -VV ${CTEST_FLAGS}

notifications:
    email: false